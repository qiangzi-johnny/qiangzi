<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.krund.hotel.manage.dao.PayorderDao">
  <resultMap id="BaseResultMap" type="com.krund.hotel.manage.entity.Payorder">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="m_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="hotel_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="order_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="pay_event" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="pay_amount" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="pay_type" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pay_info" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="remark" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="date_create" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    id, m_id, hotel_id, order_id, pay_event, pay_amount, pay_type, pay_info, remark, 
    date_create
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from payorder
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from payorder
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.krund.hotel.manage.entity.Payorder">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into payorder (m_id, hotel_id, order_id, 
      pay_event, pay_amount, pay_type, 
      pay_info, remark)
    values (#{mId,jdbcType=INTEGER}, #{hotelId,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, 
      #{payEvent,jdbcType=CHAR}, #{payAmount,jdbcType=DECIMAL}, #{payType,jdbcType=VARCHAR}, 
      #{payInfo,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.krund.hotel.manage.entity.Payorder">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into payorder
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="mId != null">
        m_id,
      </if>
      <if test="hotelId != null">
        hotel_id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="payEvent != null">
        pay_event,
      </if>
      <if test="payAmount != null">
        pay_amount,
      </if>
      <if test="payType != null">
        pay_type,
      </if>
      <if test="payInfo != null">
        pay_info,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="mId != null">
        #{mId,jdbcType=INTEGER},
      </if>
      <if test="hotelId != null">
        #{hotelId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="payEvent != null">
        #{payEvent,jdbcType=CHAR},
      </if>
      <if test="payAmount != null">
        #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="payType != null">
        #{payType,jdbcType=VARCHAR},
      </if>
      <if test="payInfo != null">
        #{payInfo,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.krund.hotel.manage.entity.Payorder">
    update payorder
    <set>
      <if test="mId != null">
        m_id = #{mId,jdbcType=INTEGER},
      </if>
      <if test="hotelId != null">
        hotel_id = #{hotelId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="payEvent != null">
        pay_event = #{payEvent,jdbcType=CHAR},
      </if>
      <if test="payAmount != null">
        pay_amount = #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="payType != null">
        pay_type = #{payType,jdbcType=VARCHAR},
      </if>
      <if test="payInfo != null">
        pay_info = #{payInfo,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.krund.hotel.manage.entity.Payorder">
    update payorder
    set m_id = #{mId,jdbcType=INTEGER},
      hotel_id = #{hotelId,jdbcType=INTEGER},
      order_id = #{orderId,jdbcType=INTEGER},
      pay_event = #{payEvent,jdbcType=CHAR},
      pay_amount = #{payAmount,jdbcType=DECIMAL},
      pay_type = #{payType,jdbcType=VARCHAR},
      pay_info = #{payInfo,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="searchSelectivePage" parameterType="com.krund.hotel.manage.entity.Payorder" resultType="com.krund.hotel.manage.entity.Payorder">
    select
    <include refid="Base_Column_List" />
    from payorder
    <where>
      <if test="hotelId != null">
        hotel_id = #{hotelId}
      </if>
      <if test="payEvent != null and payEvent != ''">
        and pay_event = #{payEvent}
      </if>
      <if test="dateCreateStart != null and dateCreateStart != '' and dateCreateEnd != null and dateCreateEnd != ''">
        and (DATE_FORMAT(date_create,'%Y-%m-%d') >= #{dateCreateStart} and DATE_FORMAT(date_create,'%Y-%m-%d') <![CDATA[<=]]> #{dateCreateEnd})
      </if>
    </where>
    order by date_create desc limit #{pageNum}, #{pageSize}
  </select>

  <select id="searchSelectivePageCount" parameterType="com.krund.hotel.manage.entity.Payorder" resultType="java.lang.Long">
    select
    count(*)
    from payorder
    <where>
      <if test="hotelId != null">
        hotel_id = #{hotelId}
      </if>
      <if test="payEvent != null and payEvent != ''">
        and pay_event = #{payEvent}
      </if>
      <if test="dateCreateStart != null and dateCreateStart != '' and dateCreateEnd != null and dateCreateEnd != ''">
        and (DATE_FORMAT(date_create,'%Y-%m-%d') >= #{dateCreateStart} and DATE_FORMAT(date_create,'%Y-%m-%d') <![CDATA[<=]]> #{dateCreateEnd})
      </if>
    </where>
  </select>
  
  <select id="analysis" parameterType="com.krund.hotel.manage.entity.Payorder" resultType="com.krund.hotel.manage.entity.Payorder">
    SELECT
    DATE_FORMAT( date_create, '%Y-%m-%d' ) dc,
    SUM(
    CASE

    WHEN pay_amount > 0 THEN
    pay_amount ELSE 0
    END
    ) income,
    SUM(
    CASE

    WHEN pay_amount <![CDATA[<]]> 0 THEN
    pay_amount ELSE 0
    END
    ) payout,
    SUM(pay_amount) profit
    FROM
    payorder
    <where>
      <if test="hotelId != null">
        hotel_id = #{hotelId}
      </if>
      <if test="dateCreateStart != null and dateCreateStart != '' and dateCreateEnd != null and dateCreateEnd != ''">
        and (DATE_FORMAT(date_create,'%Y-%m-%d') >= #{dateCreateStart} and DATE_FORMAT(date_create,'%Y-%m-%d') <![CDATA[<=]]> #{dateCreateEnd})
      </if>
    </where>
    GROUP BY
    dc
  </select>
</mapper>